import React, {useState} from 'react'
import {
  Box,
  chakra,
  Flex,
  Radio,
  Stack,
  Text,
  Wrap,
  WrapItem,
} from '@chakra-ui/react'
import {connect} from 'react-redux'
import {Form, Formik} from 'formik'

import {psqiSchema} from '../../lib/FormScheme'

import TdsButton from '../TdsButton'
import {hideModal, showModal} from '../../store/actions/modal'
import SelectUsageTime from '../SelectUsageTime'

import RadioGroupField from '../RadioGroupField'
import {calculatePsqi} from '../../utils/psqi'
// import SelectField from '../SelectField'
import {submitPsqi} from '../../store/actions/psqi'
import {fSizes} from '../../theme/spacing'

const PsqiForm = ({showModal, hideModal, auth, submitPsqi}) => {
  const [result, setResult] = useState()

  const questionMinW = ['200px', '300px', '400px', '600px']
  const maxWidthRadio = ['90vw', '250px']
  const minWidthRadio = [180]

  const labelSize = ['16px', '20px']
  const quesSize = ['14px', '16px']
  const ansSize = ['14px', '16px']

  const handleSubmit = async values => {
    const {
      q1,
      q5a,
      q5b,
      q5c,
      q5d,
      q5e,
      q5f,
      q5g,
      q5h,
      q5i,
    } = values || {}
    const answer = {
      q1: String(q1),
      q5a: Number(q5a),
      q5b: Number(q5b),
      q5c: Number(q5c),
      q5d: Number(q5d),
      q5e: Number(q5e),
      q5f: Number(q5f),
      q5g: Number(q5g),
      q5h: Number(q5h),
      q5i: Number(q5i),
    }
    console.log('answer: ', answer)
    const result = await calculatePsqi(answer)
    if (auth?.user?.email) {
      submitPsqi({email: auth.user.email, answer, point: result?.point})
    }
    console.log('\x1b[36m', 'üê£Ô∏è result |  | : ', result, '\x1b[0m')
    setResult(result)
  }

  const renderResult = () => {
    const {resultQ1, resultQ2, color} = result || {}
    return (
      <Box px={'12px'} mt={[20, 120]} align={'justify'} fontSize={[16, 18]}>
        <Text as={'i'} mt={'12px'}>
          K·∫øt qu·∫£ c·ªßa b·∫°n: {' '} <br/>
          <chakra.span fontWeight={'700'}>
            {resultQ1}
          </chakra.span>{' '} <br/>
          <chakra.span fontWeight={'700'}>
            {resultQ2}
          </chakra.span>{' '}
        </Text>
        {/* <Text as={'i'} fontWeight={'700'} mt={'12px'}>
          {resultQ1}
        </Text>

        <Text as={'i'} fontWeight={'700'} mt={'12px'}>
          {resultQ2}
        </Text> */}
      </Box>
    )
  }

  const radioQuestion = (
    id,
    label,
    question,
    c1 = 'Kh√¥ng bao gi·ªù',
    c2 = 'Th·ªânh tho·∫£ng',
    c3 = 'Th∆∞·ªùng xuy√™n',
    c4 = 'Lu√¥n lu√¥n',
  ) => {
    return (
      <Wrap>
        <WrapItem minW={questionMinW}>
          <Text pr={'12px'} fontSize={quesSize} fontWeight={'700'}>
            <chakra.span fontSize={labelSize} color={'#1e81b0'}>
              {label}{' '}
            </chakra.span>
            {question}
          </Text>
        </WrapItem>
        <WrapItem pl={'24px'}>
          <RadioGroupField pt={'5px'} alignSelf={'center'} name={id}>
            <Wrap>
              <WrapItem>
                <Radio
                  fontSize={ansSize}
                  colorScheme={'blue'}
                  minW={minWidthRadio}
                  maxW={maxWidthRadio}
                  value={0}>
                  {c1}
                </Radio>
              </WrapItem>
              <WrapItem>
                <Radio
                  fontSize={ansSize}
                  colorScheme={'blue'}
                  minW={minWidthRadio}
                  maxW={maxWidthRadio}
                  value={1}>
                  {c2}
                </Radio>
              </WrapItem>
              <WrapItem>
                <Radio
                  fontSize={ansSize}
                  colorScheme={'blue'}
                  minW={minWidthRadio}
                  maxW={maxWidthRadio}
                  value={2}>
                  {c3}
                </Radio>
              </WrapItem>
              <WrapItem>
                <Radio
                  fontSize={ansSize}
                  colorScheme={'blue'}
                  minW={minWidthRadio}
                  maxW={maxWidthRadio}
                  value={3}>
                  {c4}
                </Radio>
              </WrapItem>
            </Wrap>
          </RadioGroupField>
        </WrapItem>
      </Wrap>
    )
  }

  return (
    <Box spacing={'12px'} paddingTop='48px'>
      <Formik
        initialValues={{}}
        onSubmit={handleSubmit}
        validateOnChange={false}
        validateOnBlur={false}
        validationSchema={psqiSchema}>
        {({isSubmitting, isValid}) => (
          <Form>
            <Stack spacing={'24px'}>
              <Wrap>
                <WrapItem minW={questionMinW}>
                  <Text fontWeight={'700'} fontSize={quesSize} pr={'12px'}>
                    <chakra.span fontSize={labelSize} color={'#1e81b0'}>
                      C√¢u 1:{' '}
                    </chakra.span>
                    Th·ªùi gian s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i c·ªßa b·∫°n trong m·ªôt ng√†y trung b√¨nh kho·∫£ng bao nhi√™u gi·ªù?
                  </Text>
                </WrapItem>
                <WrapItem>
                  <SelectUsageTime
                    bg={'tdsBgSelect'}
                    ml={'24px'}
                    minW={'150px'}
                    fontSize={ansSize}
                    placeholder={'Th·ªùi gian s·ª≠ d·ª•ng'}
                    name={'q1'}
                  />
                </WrapItem>
              </Wrap>

              <Box>
                <Text fontWeight={'700'} fontSize={quesSize} pr={'12px'}>
                  <chakra.span fontSize={labelSize} color={'#1e81b0'}>
                    C√¢u 2:{' '}
                  </chakra.span>
                  H√£y ƒë√°nh gi√° v·ªÅ th√≥i quen s·ª≠ d·ª•ng thi·∫øt b·ªã kƒ© thu·∫≠t s·ªë c·ªßa b·∫°n d·ª±a v√†o m·ª©c ƒë·ªô th∆∞·ªùng xuy√™n xu·∫•t hi·ªán c·ªßa c√°c h√†nh vi sau:
                </Text>
                <Stack
                  mt={['18px', '18px', '20px']}
                  ml={['20px', '40px', '60px']}
                  spacing={'24px'}>
                  {radioQuestion(
                    'q5a',
                    'a.',
                    'D·ª±a v√†o c√°c thi·∫øt b·ªã kƒ© thu·∫≠t s·ªë ƒë·ªÉ l∆∞u gi·ªØ th√¥ng tin v√† ch·ªâ xem l·∫°i khi c·∫ßn, thay v√¨ quan s√°t v√† ghi nh·ªõ'
                  )}
                  {radioQuestion(
                    'q5b',
                    'b.',
                    'D·ª±a v√†o c√°c thi·∫øt b·ªã kƒ© thu·∫≠t s·ªë ƒë·ªÉ l∆∞u tr·ªØ v√† ghi nh·ªõ th√¥ng tin c√° nh√¢n'
                  )}
                  {radioQuestion(
                    'q5c',
                    'c.',
                    'D·ª±a v√†o c√°c thi·∫øt b·ªã kƒ© thu·∫≠t s·ªë ƒë·ªÉ l∆∞u tr·ªØ v√† ghi nh·ªõ c√°c n·ªôi dung h·ªçc t·∫≠p/c√¥ng vi·ªác'
                  )}
                  {radioQuestion(
                    'q5d',
                    'd.',
                    'D·ª±a v√†o c√°c thi·∫øt b·ªã kƒ© thu·∫≠t s·ªë ƒë·ªÉ l∆∞u tr·ªØ v√† ghi nh·ªõ c√°c d·ª± ƒë·ªãnh, k·∫ø ho·∫°ch, th·ªùi gian bi·ªÉu'
                  )}
                  {radioQuestion(
                    'q5e',
                    'e.',
                    'D·ª±a v√†o c√°c thi·∫øt b·ªã kƒ© thu·∫≠t s·ªë ƒë·ªÉ l∆∞u tr·ªØ v√† ghi nh·ªõ c√°c th√¥ng tin v·ªÅ ng∆∞·ªùi th√¢n, b·∫°n b√®'
                  )}
                  {radioQuestion(
                    'q5f',
                    'f.',
                    'D·ª±a v√†o c√°c thi·∫øt b·ªã kƒ© thu·∫≠t s·ªë ƒë·ªÉ bi·∫øt c√°ch li√™n l·∫°c v·ªõi m·ªçi ng∆∞·ªùi'
                  )}
                  {radioQuestion(
                    'q5g',
                    'g.',
                    'D·ª±a v√†o c√°c thi·∫øt b·ªã kƒ© thu·∫≠t s·ªë ƒë·ªÉ t√¨m ki·∫øm th√¥ng tin thay v√¨ huy ƒë·ªông ki·∫øn th·ª©c n·ªÅn c√≥ s·∫µn ƒë·ªÉ suy lu·∫≠n'
                  )}
                  {radioQuestion(
                    'q5h',
                    'h.',
                    'D·ª±a v√†o thi·∫øt b·ªã kƒ© thu·∫≠t s·ªë ƒë·ªÉ t√¨m ra ph∆∞∆°ng √°n gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ thay v√¨ t·ª± suy lu·∫≠n'
                  )}
                  {radioQuestion(
                    'q5i',
                    'i.',
                    'D·ª±a v√†o thi·∫øt b·ªã kƒ© thu·∫≠t s·ªë ƒë·ªÉ t√¨m √Ω t∆∞·ªüng thay v√¨ quan s√°t th·ª±c t·∫ø v√† ph√°t huy s·ª± s√°ng t·∫°o c√° nh√¢n'
                  )}
                </Stack>
              </Box>
            </Stack>

            {!result ? (
              <Box align={'center'}>
                <TdsButton
                  marginTop={'48px'}
                  type="submit"
                  minW={['130px', '220px']}
                  minH={['40px', '55px']}
                  fontSize={fSizes.b20}
                  bg={'tdsRed'}
                  isLoading={isSubmitting}>
                  K·∫øt qu·∫£ ƒë√°nh gi√°
                </TdsButton>
                {!isValid && (
                  <Text fontSize={'14px'} p={'8px'} color={'#1e81b0'}>
                    Vui l√≤ng ho√†n th√†nh t·∫•t c·∫£ c√¢u h·ªèi
                  </Text>
                )}
              </Box>
            ) : (
              renderResult()
            )}
          </Form>
        )}
      </Formik>
    </Box>
  )
}

const mapStateToProps = state => ({
  auth: state.auth,
})

export default connect(mapStateToProps, {showModal, hideModal, submitPsqi})(
  PsqiForm
)
