import React, {useState} from 'react'
import {
  Box,
  chakra,
  Flex,
  Radio,
  Stack,
  Text,
  Wrap,
  WrapItem,
} from '@chakra-ui/react'
import {connect} from 'react-redux'
import {Form, Formik} from 'formik'

import {psqiSchema} from '../../lib/FormScheme'

import TdsButton from '../TdsButton'
import {hideModal, showModal} from '../../store/actions/modal'
import SelectSleepTime from '../SelectSleepTime'
import RadioGroupField from '../RadioGroupField'
import {calculatePsqi} from '../../utils/psqi'
import SelectWakeUpTime from '../SelectWakeUpTime'
import SelectField from '../SelectField'
import {submitPsqi} from '../../store/actions/psqi'
import {fSizes} from '../../theme/spacing'

const PsqiForm = ({showModal, hideModal, auth, submitPsqi}) => {
  const [result, setResult] = useState()

  const questionMinW = ['200px', '300px', '400px', '600px']
  const maxWidthRadio = ['90vw', '250px']
  const minWidthRadio = [180]

  const labelSize = ['16px', '20px']
  const quesSize = ['14px', '16px']
  const ansSize = ['14px', '16px']

  const handleSubmit = async values => {
    const {
      q1,
      q2,
      q3,
      q4,
      q5a,
      q5b,
      q5c,
      q5d,
      q5e,
      q5f,
      q5g,
      q5h,
      q5i,
      q5j,
      q6,
      q7,
      q8,
      q9,
    } = values || {}
    const answer = {
      q1: Number(q1),
      q2: Number(q2),
      q3: Number(q3),
      q4: Number(q4),
      q5a: Number(q5a),
      q5b: Number(q5b),
      q5c: Number(q5c),
      q5d: Number(q5d),
      q5e: Number(q5e),
      q5f: Number(q5f),
      q5g: Number(q5g),
      q5h: Number(q5h),
      q5i: Number(q5i),
      q5j: Number(q5j),
      q6: Number(q6),
      q7: Number(q7),
      q8: Number(q8),
      q9: Number(q9),
    }
    console.log('answer: ', answer)
    const result = await calculatePsqi(answer)
    if (auth?.user?.email) {
      submitPsqi({email: auth.user.email, answer, point: result?.point})
    }
    console.log('\x1b[36m', 'üê£Ô∏è result |  | : ', result, '\x1b[0m')
    setResult(result)
  }

  const renderResult = () => {
    const {tp, message, point, color} = result || {}
    return (
      <Box px={'12px'} mt={[20, 120]} align={'justify'} fontSize={[16, 18]}>
        <Text as={'i'} mt={'12px'}>
          ƒêi·ªÉm PSQI - Pittsburgh Sleep Quality Index kh·∫£o s√°t 7 th√†nh ph·∫ßn c·ªßa
          gi·∫•c ng·ªß.{' '}
          <chakra.span fontWeight={'700'}>
            Thang ƒëi·ªÉm PSQI c√≥ k·∫øt qu·∫£ t·ª´ 0 ‚Äì 21 ƒëi·ªÉm v·ªõi 0 l√† ch·∫•t l∆∞·ª£ng gi·∫•c
            ng·ªß t·ªët v√† 21 l√† ch·∫•t l∆∞·ª£ng gi·∫•c ng·ªß c·ª±c k·ª≥ k√©m.
          </chakra.span>{' '}
          M·ªôt ng∆∞·ªùi b√¨nh th∆∞·ªùng v·ªõi gi·∫•c ng·ªß t·ªët s·∫Ω c√≥ ƒëi·ªÉm PSQI {'<'} 5.
        </Text>
        <Box mt={['12px', '24px']}>
          <Text as={'i'} fontWeight={'700'} mt={'12px'}>
            ƒêi·ªÉm ch·∫•t l∆∞·ª£ng gi·∫•c ng·ªß c·ªßa b·∫°n:{' '}
            <chakra.span color={color}>{point}/21</chakra.span>
          </Text>
        </Box>
        <Text as={'i'} fontWeight={'700'} mt={'12px'}>
          {message}
        </Text>
        <Flex>
          <Flex
            minW={['200px', '300px']}
            mt={['12px', '24px']}
            direction={'column'}
            alignItems={'flex-start'}
            justify={'flex-start'}>
            <Text as={'i'} mb={'4px'}>
              ƒêi·ªÉm th√†nh ph·∫ßn c·ª• th·ªÉ{' '}
              <chakra.span fontWeight={'700'}>
                (Thang ƒëi·ªÉm t·ª´ 0 - 3 v·ªõi 0 l√† r·∫•t t·ªët v√† 3 l√† r·∫•t t·ªá)
              </chakra.span>
            </Text>
            <Text as={'i'}>‚Ä¢ Ch·∫•t l∆∞·ª£ng gi·∫•c ng·ªß ch·ªß quan: {tp.tp1}</Text>
            <Text as={'i'}>‚Ä¢ ƒê·ªô tr·ªÖ gi·∫•c ng·ªß: {tp.tp2}</Text>
            <Text as={'i'}>‚Ä¢ Th·ªùi gian ng·ªß: {tp.tp3}</Text>
            <Text as={'i'}>‚Ä¢ Th√≥i quen ng·ªß hi·ªáu qu·∫£: {tp.tp4}</Text>
            <Text as={'i'}>‚Ä¢ C√°c r·ªëi lo·∫°n khi ng·ªß: {tp.tp5}</Text>
            <Text as={'i'}>‚Ä¢ S·ª≠ d·ª•ng thu·ªëc ng·ªß: {tp.tp6}</Text>
            <Text as={'i'}>‚Ä¢ Ch·∫•t l∆∞·ª£ng l√†m vi·ªác ban ng√†y: {tp.tp7}</Text>
          </Flex>
        </Flex>
      </Box>
    )
  }

  const radioQuestion = (
    id,
    label,
    question,
    c1 = 'Kh√¥ng l·∫ßn n√†o',
    c2 = '1-3 l·∫ßn/th√°ng',
    c3 = '4-8 l·∫ßn/th√°ng',
    c4 = '‚â•9 l·∫ßn/th√°ng'
  ) => {
    return (
      <Wrap>
        <WrapItem minW={questionMinW}>
          <Text pr={'12px'} fontSize={quesSize} fontWeight={'700'}>
            <chakra.span fontSize={labelSize} color={'red'}>
              {label}:{' '}
            </chakra.span>
            {question}
          </Text>
        </WrapItem>
        <WrapItem pl={'24px'}>
          <RadioGroupField pt={'5px'} alignSelf={'center'} name={id}>
            <Wrap>
              <WrapItem>
                <Radio
                  fontSize={ansSize}
                  colorScheme={'blue'}
                  minW={minWidthRadio}
                  maxW={maxWidthRadio}
                  value={0}>
                  {c1}
                </Radio>
              </WrapItem>
              <WrapItem>
                <Radio
                  fontSize={ansSize}
                  colorScheme={'blue'}
                  minW={minWidthRadio}
                  maxW={maxWidthRadio}
                  value={1}>
                  {c2}
                </Radio>
              </WrapItem>
              <WrapItem>
                <Radio
                  fontSize={ansSize}
                  colorScheme={'blue'}
                  minW={minWidthRadio}
                  maxW={maxWidthRadio}
                  value={2}>
                  {c3}
                </Radio>
              </WrapItem>
              <WrapItem>
                <Radio
                  fontSize={ansSize}
                  colorScheme={'blue'}
                  minW={minWidthRadio}
                  maxW={maxWidthRadio}
                  value={3}>
                  {c4}
                </Radio>
              </WrapItem>
            </Wrap>
          </RadioGroupField>
        </WrapItem>
      </Wrap>
    )
  }

  return (
    <Box spacing={'12px'}>
      <Formik
        initialValues={{}}
        onSubmit={handleSubmit}
        validateOnChange={false}
        validateOnBlur={false}
        validationSchema={psqiSchema}>
        {({isSubmitting, isValid}) => (
          <Form>
            <Stack spacing={'24px'}>
              <Wrap>
                <WrapItem minW={questionMinW}>
                  <Text fontWeight={'700'} fontSize={quesSize} pr={'12px'}>
                    <chakra.span fontSize={labelSize} color={'red'}>
                      C√¢u 1:{' '}
                    </chakra.span>
                    B·∫°n th∆∞·ªùng ƒëi ng·ªß l√∫c m·∫•y gi·ªù?
                  </Text>
                </WrapItem>
                <WrapItem>
                  <SelectSleepTime
                    bg={'tdsBgSelect'}
                    ml={'24px'}
                    minW={'150px'}
                    fontSize={ansSize}
                    placeholder={'Ch·ªçn gi·ªù'}
                    name={'q1'}
                  />
                </WrapItem>
              </Wrap>
              {radioQuestion(
                'q2',
                'C√¢u 2',
                'Sau khi l√™n gi∆∞·ªùng, b·∫°n m·∫•t bao nhi√™u ph√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu ng·ªß?',
                '<15 ph√∫t',
                '16 - 30 ph√∫t',
                '31 - 60 ph√∫t',
                '>60 ph√∫t'
              )}
              <Wrap>
                <WrapItem minW={questionMinW}>
                  <Text fontWeight={'700'} fontSize={quesSize} pr={'12px'}>
                    <chakra.span fontSize={labelSize} color={'red'}>
                      C√¢u 3:{' '}
                    </chakra.span>
                    B·∫°n th∆∞·ªùng d·∫≠y l√∫c m·∫•y gi·ªù?
                  </Text>
                </WrapItem>
                <WrapItem>
                  <SelectWakeUpTime
                    bg={'tdsBgSelect'}
                    ml={'24px'}
                    minW={'150px'}
                    fontSize={ansSize}
                    placeholder={'Ch·ªçn gi·ªù'}
                    name={'q3'}
                  />
                </WrapItem>
              </Wrap>
              <Wrap>
                <WrapItem minW={questionMinW} maxW={'500px'}>
                  <Text fontWeight={'700'} fontSize={quesSize} pr={'12px'}>
                    <chakra.span fontSize={labelSize} color={'red'}>
                      C√¢u 4:{' '}
                    </chakra.span>
                    B·∫°n th∆∞·ªùng ng·ªß bao nhi√™u ti·∫øng m·ªói ƒë√™m? (t√≠nh th·ªùi gian ng·ªß
                    th·ª±c s·ª±, kh√¥ng t√≠nh th·ªùi gian n·∫±m tr√™n gi∆∞·ªùng nh∆∞ng thao
                    th·ª©c, d√πng ƒëi·ªán tho·∫°i,...)
                  </Text>
                </WrapItem>
                <WrapItem>
                  <SelectField
                    bg={'tdsBgSelect'}
                    ml={'24px'}
                    fontSize={ansSize}
                    minW={'150px'}
                    placeholder={'Ch·ªçn gi·ªù'}
                    name={'q4'}>
                    <option value={3}>3</option>
                    <option value={3.5}>3.5</option>
                    <option value={4}>4</option>
                    <option value={4.5}>4.5</option>
                    <option value={5}>5</option>
                    <option value={5.5}>5.5</option>
                    <option value={6}>6</option>
                    <option value={6.5}>6.5</option>
                    <option value={7}>7</option>
                    <option value={7.5}>7.5</option>
                    <option value={8}>8</option>
                    <option value={8.5}>8.5</option>
                    <option value={9}>9</option>
                    <option value={9.5}>9.5</option>
                    <option value={10}>10</option>
                  </SelectField>
                </WrapItem>
              </Wrap>
              <Box>
                <Text fontWeight={'700'} fontSize={quesSize} pr={'12px'}>
                  <chakra.span fontSize={labelSize} color={'red'}>
                    C√¢u 5:{' '}
                  </chakra.span>
                  D∆∞·ªõi ƒë√¢y l√† c√°c v·∫•n d·ªÅ v·ªÅ gi·∫•c ng·ªß th∆∞·ªùng g·∫∑p. B·∫°n h√£y nghƒ©
                  l·∫°i xem trong th√°ng v·ª´a qua, b·∫°n c√°c g·∫∑p v·∫•n ƒë·ªÅ n√†o v√† t·∫ßn
                  su·∫•t l·∫∑p l·∫°i c·ªßa t·ª´ng v·∫•n ƒë·ªÅ nh√©!
                </Text>
                <Stack
                  mt={['18px', '18px', '20px']}
                  ml={['20px', '40px', '60px']}
                  spacing={'24px'}>
                  {radioQuestion(
                    'q5a',
                    'A',
                    'M·∫•t h∆°n 30 ph√∫t tr√™n gi∆∞·ªùng m·ªõi ng·ªß ƒë∆∞·ª£c'
                  )}
                  {radioQuestion('q5b', 'B', 'D·∫≠y gi·ªØa ƒë√™m ho·∫∑c g·∫ßn s√°ng')}
                  {radioQuestion('q5c', 'C', 'D·∫≠y d√πng nh√† v·ªá sinh')}
                  {radioQuestion('q5d', 'D', 'Th·∫•y kh√≥ th·ªü')}
                  {radioQuestion('q5e', 'E', 'Ho ho·∫∑c ng√°y l·ªõn')}
                  {radioQuestion('q5f', 'F', 'Th·∫•y qu√° l·∫°nh')}
                  {radioQuestion('q5g', 'G', 'Th·∫•y qu√° n√≥ng')}
                  {radioQuestion('q5h', 'H', 'G·∫∑p √°c m·ªông')}
                  {radioQuestion(
                    'q5i',
                    'I',
                    'B·ªã ƒëau m·ªôt b·ªô ph·∫≠n n√†o ƒë√≥ khi ng·ªß (l∆∞ng, g√°y,...)'
                  )}
                  {radioQuestion('q5j', 'J', 'G·∫∑p v·∫•n ƒë·ªÅ kh√°c v·ªÅ gi·∫•c ng·ªß')}
                </Stack>
              </Box>
              {radioQuestion(
                'q6',
                'C√¢u 6',
                'Trong th√°ng qua, b·∫°n c√≥ ph·∫£i d√πng thu·ªëc ƒë·ªÉ ng·ªß (t√¢y d∆∞·ª£c, ƒë√¥ng d∆∞·ª£c,...) kh√¥ng?'
              )}
              {radioQuestion(
                'q7',
                'C√¢u 7',
                'Trong th√°ng qua, b·∫°n c√≥ m·∫•t t·ªânh t√°o khi l√°i xe, ƒÉn u·ªëng, tham gia ho·∫°t ƒë·ªông x√£ h·ªôi kh√¥ng?'
              )}
              {radioQuestion(
                'q8',
                'C√¢u 8',
                'Trong th√°ng qua, b·∫°n c√≥ th·∫•y thi·∫øu ng·ªß l√†m m·∫•t c·∫£m h·ª©ng l√†m vi·ªác kh√¥ng?',
                'Kh√¥ng th∆∞·ªùng g·∫∑p',
                'Th·ªânh tho·∫£ng, kh√¥ng ph·∫£i v·∫•n ƒë·ªÅ l·ªõn',
                'C·∫£n tr·ªü l√†m vi·ªác m·ªôt ch√∫t',
                'V·∫•n ƒë·ªÅ l·ªõn, kh√¥ng th·ªÉ l√†m vi·ªác t·ªët ƒë∆∞·ª£c'
              )}
              {radioQuestion(
                'q9',
                'C√¢u 9',
                'B·∫°n t·ª± ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng gi·∫•c ng·ªß trong th√°ng qua th·∫ø n√†o?',
                'R·∫•t t·ªët',
                'T·ªët',
                'T·ªá',
                'R·∫•t t·ªá'
              )}
            </Stack>

            {!result ? (
              <Box align={'center'}>
                <TdsButton
                  marginTop={'48px'}
                  type="submit"
                  minW={['130px', '220px']}
                  minH={['40px', '55px']}
                  fontSize={fSizes.b20}
                  bg={'tdsRed'}
                  isLoading={isSubmitting}>
                  K·∫øt qu·∫£ ƒë√°nh gi√°
                </TdsButton>
                {!isValid && (
                  <Text fontSize={'14px'} p={'8px'} color={'red'}>
                    Vui l√≤ng ho√†n th√†nh t·∫•t c·∫£ c√¢u h·ªèi
                  </Text>
                )}
              </Box>
            ) : (
              renderResult()
            )}
          </Form>
        )}
      </Formik>
    </Box>
  )
}

const mapStateToProps = state => ({
  auth: state.auth,
})

export default connect(mapStateToProps, {showModal, hideModal, submitPsqi})(
  PsqiForm
)
